# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: cert.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


import public_key_pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='cert.proto',
  package='',
  serialized_pb=_b('\n\ncert.proto\x1a\x10public_key.proto\"\xc6\x01\n\x04\x43\x65rt\x12\x1e\n\x07version\x18\x01 \x02(\x0e\x32\r.Cert.Version\x12\x1e\n\x07keyType\x18\x02 \x02(\x0e\x32\r.Cert.KeyType\x12\x1d\n\tpublicKey\x18\x03 \x01(\x0b\x32\n.PublicKey\"*\n\x07Version\x12\x13\n\x0fUNKNOWN_VERSION\x10\x00\x12\n\n\x06_0_0_1\x10\x01\"3\n\x07KeyType\x12\x14\n\x10UNKNOWN_KEY_TYPE\x10\x00\x12\x07\n\x03RSA\x10\x01\x12\t\n\x05\x45\x43\x44SA\x10\x02')
  ,
  dependencies=[public_key_pb2.DESCRIPTOR,])
_sym_db.RegisterFileDescriptor(DESCRIPTOR)



_CERT_VERSION = _descriptor.EnumDescriptor(
  name='Version',
  full_name='Cert.Version',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='UNKNOWN_VERSION', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='_0_0_1', index=1, number=1,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=136,
  serialized_end=178,
)
_sym_db.RegisterEnumDescriptor(_CERT_VERSION)

_CERT_KEYTYPE = _descriptor.EnumDescriptor(
  name='KeyType',
  full_name='Cert.KeyType',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='UNKNOWN_KEY_TYPE', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='RSA', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ECDSA', index=2, number=2,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=180,
  serialized_end=231,
)
_sym_db.RegisterEnumDescriptor(_CERT_KEYTYPE)


_CERT = _descriptor.Descriptor(
  name='Cert',
  full_name='Cert',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='version', full_name='Cert.version', index=0,
      number=1, type=14, cpp_type=8, label=2,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='keyType', full_name='Cert.keyType', index=1,
      number=2, type=14, cpp_type=8, label=2,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='publicKey', full_name='Cert.publicKey', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
    _CERT_VERSION,
    _CERT_KEYTYPE,
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=33,
  serialized_end=231,
)

_CERT.fields_by_name['version'].enum_type = _CERT_VERSION
_CERT.fields_by_name['keyType'].enum_type = _CERT_KEYTYPE
_CERT.fields_by_name['publicKey'].message_type = public_key_pb2._PUBLICKEY
_CERT_VERSION.containing_type = _CERT
_CERT_KEYTYPE.containing_type = _CERT
DESCRIPTOR.message_types_by_name['Cert'] = _CERT

Cert = _reflection.GeneratedProtocolMessageType('Cert', (_message.Message,), dict(
  DESCRIPTOR = _CERT,
  __module__ = 'cert_pb2'
  # @@protoc_insertion_point(class_scope:Cert)
  ))
_sym_db.RegisterMessage(Cert)


# @@protoc_insertion_point(module_scope)
